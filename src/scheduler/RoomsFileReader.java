package scheduler;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;

import javax.xml.parsers.*;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import dataStructures.SinglyLinkedList;
import dataStructures.SinglyLinkedListNode;
import objectType.Room;

import org.w3c.dom.*;

/**
 * A class that reads from xml file
 * @author Zhiling
 *
 */
public class RoomsFileReader		{
	
	public static Room[] lib_group;
	public static Room[] lib_meeting;
	
	public static SinglyLinkedList<Room> groupLL;
	public static SinglyLinkedList<Room> meetingLL;
	
	/**
	 * Default Constuctor
	 * @param file
	 */
	public RoomsFileReader(String file)		{
		groupLL = new SinglyLinkedList<Room>();
		meetingLL = new SinglyLinkedList<Room>();
		readXML(file);
	}
	
	/**
	 * Getter for the group study rooms count
	 * @return
	 */
	public int getGroupArrSize()	{
		return groupLL.size();
	}
	
	/**
	 * Getter for the meeting rooms count
	 * @return
	 */
	public int getMeetingArrSize()	{
		return meetingLL.size();
	}
	
	/**
	 * Transfer a linkedlist to an array
	 */
	public Room[] getGroupArr()	{
		int size = groupLL.size();
		lib_group = new Room[size];
		SinglyLinkedListNode<Room> temp = groupLL.getFirstNode();
		int i = 0;
		while (temp!=null)	{
			lib_group[i] = temp.getData();
			temp = temp.getNext();
			i = i + 1;
		}
		System.out.println("group linked list size: " + size );
		return lib_group;
	}
	
	
	/**
	 * Transfer a linkedlist to an array
	 */
	public Room[] getMeetingArr()	{
		int size = meetingLL.size();
		lib_meeting = new Room[size];
		SinglyLinkedListNode<Room> temp = meetingLL.getFirstNode();
		int i = 0;
		while (temp!=null)	{
			lib_meeting[i] = temp.getData();
			temp = temp.getNext();
			i = i + 1;
		}
		System.out.println("meeting linked list size: " + size );
		return lib_meeting;
	}
	
	
	/**
	 * take in file and turn a tree
	 * @param file
	 * @return
	 */
	public static SinglyLinkedList<Room> readXML(String file){
		//Setup XML Document
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		
		try	{
			File xmlFile = new File( file );
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse( xmlFile );
			
			return parseXML( document );
		}

		catch (SAXParseException spe)	{
			// Error generated by the parser
			System.out.println("SAXParse");
		}
		catch (SAXException sxe)		{
			//if any parse errors occur.
			System.out.println("SAX");
		}
		catch (ParserConfigurationException pce)		{
			System.out.println("confi");
        }
        catch (IOException ioe) 		{
            // I/O error
        	System.out.println("I/o");
        }
		catch (ArrayIndexOutOfBoundsException aiobe)		{
			// array out of bound
	        System.out.println("Out of bound");
		}
		
		return null;
		
	}
	

	/**
	 * parese xml file
	 * find the root and start parsing node from the root
	 * @param document
	 * @return
	 */
	private static SinglyLinkedList<Room> parseXML(Document document)	{
		Node docRoot =  document.getDocumentElement();
		parseRoom(docRoot, groupLL);
		return groupLL;
	}
	
	/**
	 * recursing method
	 * @param n
	 */
	private static void parseRoom(Node n, SinglyLinkedList<Room> rooms )	{
		//If it's a student Node parse the Student
		if( n.getNodeType() == Node.ELEMENT_NODE )	{	
			Element currentElt = (Element)n;
			if( currentElt.getNodeName().equals("group") ){
				Room room = parseRoomElement(currentElt);
				groupLL.insertLast(room);
			}
			if( currentElt.getNodeName().equals("meeting") ){
				Room room = parseRoomElement(currentElt);
				meetingLL.insertLast(room);
			}
		}
		if (n.hasChildNodes()){
			//collect the child Nodes
			NodeList list = n.getChildNodes();
			//run a for loop from 0 to NodeList.getLength
			for (int i = 0; i < list.getLength(); i++)
				parseRoom(list.item( i ), rooms);
		 }
	}
	
	private static Room parseRoomElement(Element curr) {
		String roomName = "";
		String ID = "";
		String loc = "";
		String info = "";
		String addl = "";
	 
		ID = curr.getAttribute("ID_num");
		NodeList childNodes = curr.getChildNodes();
	    for ( int i = 0; i < childNodes.getLength(); i++ )	{
	        	Node childNode = childNodes.item(i);
			if( childNode.getNodeName().equals("roomName") )
				roomName = childNode.getTextContent();
			else if(childNode.getNodeName().equals( "location" ) )
				loc = childNode.getTextContent();
			else if(childNode.getNodeName().equals( "info" ))
				info = childNode.getTextContent();
			else if(childNode.getNodeName().equals( "additional"))
				addl = childNode.getTextContent();
	    	}    
	    return new Room(roomName, loc);
	}


	

	
}